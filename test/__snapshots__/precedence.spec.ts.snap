// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`operator precedence > 16 - 15 / 14 - 13 > 12 >= not 11 >= 10 = 9 and 8 or - 7 == 6 + 5 * 4 <> 3 != 2 < 1 1`] = `
Logical {
  "left": Logical {
    "left": Binary {
      "left": Binary {
        "left": Binary {
          "left": Binary {
            "left": Binary {
              "left": Binary {
                "left": IntLiteral {
                  "value": 16,
                },
                "op": "-",
                "right": Binary {
                  "left": IntLiteral {
                    "value": 15,
                  },
                  "op": "/",
                  "right": IntLiteral {
                    "value": 14,
                  },
                },
              },
              "op": "-",
              "right": IntLiteral {
                "value": 13,
              },
            },
            "op": ">",
            "right": IntLiteral {
              "value": 12,
            },
          },
          "op": ">=",
          "right": Unary {
            "expr": IntLiteral {
              "value": 11,
            },
            "op": "not",
          },
        },
        "op": ">=",
        "right": IntLiteral {
          "value": 10,
        },
      },
      "op": "==",
      "right": IntLiteral {
        "value": 9,
      },
    },
    "op": "and",
    "right": IntLiteral {
      "value": 8,
    },
  },
  "op": "or",
  "right": Binary {
    "left": Binary {
      "left": Binary {
        "left": Unary {
          "expr": IntLiteral {
            "value": 7,
          },
          "op": "-",
        },
        "op": "==",
        "right": Binary {
          "left": IntLiteral {
            "value": 6,
          },
          "op": "+",
          "right": Binary {
            "left": IntLiteral {
              "value": 5,
            },
            "op": "*",
            "right": IntLiteral {
              "value": 4,
            },
          },
        },
      },
      "op": "<>",
      "right": IntLiteral {
        "value": 3,
      },
    },
    "op": "<>",
    "right": Binary {
      "left": IntLiteral {
        "value": 2,
      },
      "op": "<",
      "right": IntLiteral {
        "value": 1,
      },
    },
  },
}
`;

exports[`operator precedence > 16 - 15 / 14 - 13 > 12 >= not 11 >= 10 = 9 and 8 or - 7 == 6 + 5 * 4 <> 3 != 2 < 1 2`] = `[ParseWarning]`;
