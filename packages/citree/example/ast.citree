type Expr in './expr' {
  import { Token, TokenKind } from '../tokens'

  Unary          => op: TokenKind, expr: Expr
  Binary         => left: Expr, op: TokenKind, right: Expr
  Logical        => left: Expr, op: TokenKind, right: Expr
  Group          => expr: Expr
  Variable       => ident: Token
  IntLiteral     => value: number
  RealLiteral    => value: number
  BoolLiteral    => value: boolean
  StringLiteral  => value: string
  PromptLiteral  => value: string
  NilLiteral!
}

type Instr in './instr' {
  import { Expr, Variable } from './expr'

  Instr      => offsetStart: number = -1, offsetEnd: number = -1
  Rem        => remark: string
  Let        => variable: Variable, value: Expr | null
  Assign     => variable: Variable, value: Expr
  Expression => expression: Expr
  Print      => expression: Expr
  Exit       => expression: Expr | null
  End!
  New        => filename: Expr | null
  Load       => filename: Expr, run: boolean
  List!
  Renum!
  Run!
  Save       => filename: Expr | null
  ShortIf    => condition: Expr, then: Instr[], else_: Instr[]
  If         => condition: Expr
  Else!
  ElseIf     => condition: Expr
  EndIf!
  For        => variable: Variable, value: Expr, loop: Instr[]
  While      => condition: Expr, loop: Instr[]
  Repeat     => condition: Expr, loop: Instr[]
}

type Tree in './index' {
  import { Source } from './source'
  import { Instr } from './instr'

  Cmd          => cmdNo: number, row: number, source: Source, instructions: Instr[]
  Line         => lineNo: number, row: number, source: Source, instructions: Instr[]
  Input        => input: Array<Cmd | Line>
  Program      => filename: string, lines: Line[]
}
