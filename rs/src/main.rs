use tracing_subscriber;

use clap::Parser;

// yabasic inlines basic command execution in this file. I would probably want
// to move it to a command.rs. but let's document what that would actually
// entail here.
//
// Basically, there's a little VM that eats up little commands, which are
// generated by evaluating statements/expressions. The code for this looks like
// a big ol' switch/case statement. In other words, a big match statement.

mod ast;
mod error;
mod host;
mod parser;
mod scanner;
mod symbol;
mod tokens;
mod dim;

mod visitor;

use crate::ast::Exception;
// use crate::editor::Editor;
use crate::host::console::ConsoleHost;
// use crate::interpreter::{interactive, run, Interpreter};

#[derive(Parser)]
#[command(author, version)]
struct Cli {
    file: Option<String>,
}

fn main() -> Result<(), Exception> {
    tracing_subscriber::fmt::init();

    let cli = Cli::parse();

    // let interpreter = Interpreter::new();
    let mut host = ConsoleHost::new();
    // let mut editor = Editor::new();

    /*
    match cli.file {
        Some(file) => {
            editor.load_script(&file)?;
            match run(interpreter, &host, &mut editor) {
                Err(Exception::Halt(state)) => Ok(state),
                other => other,
            }?;
            Ok(())
        }
        None => {
            interactive(interpreter, &mut host, &mut editor);
            Ok(())
        }
    }
    */
    Ok(())
}
